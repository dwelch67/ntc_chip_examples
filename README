
got a couple of these

https://www.kickstarter.com/projects/1598272670/chip-the-worlds-first-9-computer/description

Their docs seem to be a moving target, changed since I first wrote this

went here for bringup help

http://docs.getchip.com

Under Advanced there is a Setup Ubuntu For Flashing

Then under CHIP Hardware it shows where to connect a 3.3V level uart,
see below for ideas to connect to this.

Then under Advanced see Flash CHIP Firmware

The uart is not required for this step it uses the usb with the fel
tool which looks VERY interesting, going to see if I cant use that
tool to load/run stuff rather than through u-boot.

Part of the setup for ubuntu you get this repo

git clone https://github.com/linux-sunxi/sunxi-tools

For documentation get this repo

git clone https://github.com/NextThingCo/CHIP-Hardware.git

You may also want to get the ARMv7AR Architectural Reference Manual

http://infocenter.arm.com

And the technical reference manual for a cortex-A8 but I dont know
what rev, sometimes minor and/or major revs make a big difference with
the ARM TRM docs, will have to just wing it.

From the Allwinner manual

uart1 base address 0x01C28400 and it is 16550 style so the rx and
tx registers are at offset zero

so power up and catch uboot with a keypress

then

sunxi# mw 0x01c28400 0x55
Usunxi#

sunxi# mw 0x01c28400 0x56
Vsunxi#

so that causes characters to go out the uart.

supposedly there is ram at address zero (vs rom)


sunxi# md 0 20
00000000: ea000006 4e4f4765 3054422e 2df63554    ....eGON.BT0T5.-
00000010: 00006000 00000000 00000000 00000000    .`..............
00000020: ea000016 e59ff014 e59ff001 e59ff014    ................
00000030: e59ff014 e59ff014 e59ff014 e59ff014    ................
00000040: 00000060 00000060 00000060 00000060    `...`...`...`...
00000050: 00000060 00000060 00000060 deadbeef    `...`...`.......
00000060: ebfffffe e320f000 e320f000 e320f000    ...... ... ... .
00000070: e320f000 e320f000 e320f000 e320f000    .. ... ... ... .

sunxi# mw 0x14 0x12345678
sunxi# md 0 20
00000000: ea000006 4e4f4765 3054422e 2df63554    ....eGON.BT0T5.-
00000010: 00006000 12345678 00000000 00000000    .`..xV4.........
00000020: ea000016 e59ff014 e59ff001 e59ff014    ................
00000030: e59ff014 e59ff014 e59ff014 e59ff014    ................
00000040: 00000060 00000060 00000060 00000060    `...`...`...`...
00000050: 00000060 00000060 00000060 deadbeef    `...`...`.......
00000060: ebfffffe e320f000 e320f000 e320f000    ...... ... ... .
00000070: e320f000 e320f000 e320f000 e320f000    .. ... ... ... .

guess so.

and it looks like ddr2/ddr3 is at 0x40000000.  not sure how much if
the bootloader is using it.  printenv shows

kernel_addr_r=0x42000000

there are other addresses in that space, just not sure yet how much
room to leave for the bootloader, so will start with 0x42000000

sunxi# md 0x42000000 20
42000000: ffffffff ffffffff ffffffff ffffffff    ................
42000010: ffffffff ffffffff ffffffff ffffffff    ................
42000020: ffffffff ffffffff ffffffff ffffffff    ................
42000030: ffffffff ffffffff ffffffff ffffffff    ................
42000040: ffffffff ffffffff ffffffff ffffffff    ................
42000050: ffffffff ffffffff ffffffff ffffffff    ................
42000060: ffffffff ffffffff ffffffff ffffffff    ................
42000070: ffffffff ffffffff ffffffff ffffffff    ................
sunxi# mw 0x42000000 12345678
sunxi# md 0x42000000 20
42000000: 12345678 ffffffff ffffffff ffffffff    xV4.............
42000010: ffffffff ffffffff ffffffff ffffffff    ................
42000020: ffffffff ffffffff ffffffff ffffffff    ................
42000030: ffffffff ffffffff ffffffff ffffffff    ................
42000040: ffffffff ffffffff ffffffff ffffffff    ................
42000050: ffffffff ffffffff ffffffff ffffffff    ................
42000060: ffffffff ffffffff ffffffff ffffffff    ................
42000070: ffffffff ffffffff ffffffff ffffffff    ................
sunxi#

trying uart01 example

sunxi# loadx 0x42000000
## Ready for binary (xmodem) download to 0x42000000 at 115200 bps...
{
minicom ctrl-a then s then down to xmodem, enter a few times then
type in the path and filename notmain.bin.  teraterm, putty, hyperterm,
etc?  I dont know, figure it out.  you can use ymodem as well.
}
sunxi# go 0x42000000
## Starting application at 0x42000000 ...
12345678
5B22FB98
12345678

so the stack pointer was around 400mbytes into ram.


note uboot had started up like this


U-Boot 2015.07 (Nov 03 2015 - 07:12:54 +0000) Allwinner Technology

CPU:   Allwinner A13 (SUN5I)
I2C:   ready
DRAM:  512 MiB
NAND:  8192 MiB
MMC:   SUNXI SD/MMC: 0

which is what the kickstarter page said 512MBytes of ram.  although
this shows 8GB of flash and kickstarter says 4GB.

Why didnt I start with an led example?  Two reasons generally for
uboot (or other bootloader like that) there is already a uart ready
to go.  The CHIP-Hardware repo has schematics

There is an AXP209 http://linux-sunxi.org/AXP209 which has the GPIO
talked about in the NTC forums and that is where the reset button
is connected.  So to use either of those need to deal with how
to talk to that chip.  Maybe later.  I do know now that if you hold
the reset button like you would a power button on a hung computer
after several seconds it powers off.  But then even if you unplug
the usb and plug it back in (or maybe I didnt wait long enough) you
have to hold it for a shorter amount of time.  Basically for bare metal
you can use that button and not keep unplugging and plugging the usb.

The LEDs on the board are incredibly painful, instant migraine...I
was able to remove them without too much trouble (average soldering
skills, add new solder to each side, get a good blob on there, then
you can put the iron so it touches both blobs and CAREFULLY slide
the led off without pulling up the pads.  Yes you destroy the led
this way).  Could probably put a dab of nail polish or paint on them
if you get headaches from leds like this.

So that you dont have to hit enter within 3 seconds, assuming you
are like me and only interested in bare metal.

sunxi# setenv bootcmd loadx
sunxi# saveenv

loadx by default starts with 0x42000000 the address we guessed at above

when looking at the component side of the board, with the usb up the
connector on the right

1 GND
3 UART1-TX
5 UART1-RX
7 FEL

So again this is a uboot based board so uboot has already setup many
things including the uart, so you dont really need to start with
a blinker program.  The stuff above showed using uboot commands to
poke at the uart output, from there you just dive into your first
uart program (uart01).

I did make an led blinker blinker01, and that demonstrates that we
probably have a bunch of GPIO (all of the LCD ones at least) to play
with if we want as well as the special function ones spi, etc (LCD
is a special function one too).  Having the uart right off though
kind of eliminates the need for too much led based things and not
everyone has an led, of course not everyone has a uart breakout
board.

I recommend a header like this

mouser part number 872-920-0102-01

They are exactly twice too long, you can figure out other ways to
break them at the right length but you can plug one in to the CHIP
let the other half hang off the end, gives it the stiffness to break
at the right place, then plug that row in.  Repeat for the other side.

This means you can use female/female jumpers (assuming your uart
solution has female on them or maybe repeat the process with more of
these jumpers).

this is my go-to ftdi board, I have a number of them and use them
for everything.

https://www.sparkfun.com/products/retired/718

You need a 3.3V one for most boards NOT the 5V one you might have for
some arduino or avr boards.  Basically the ones you might use for a
raspberry pi.

You can use one of these

https://www.sparkfun.com/products/9873

I have/use these for everything

https://www.sparkfun.com/products/10898

For this board you might need one male end

https://www.sparkfun.com/products/9139

or both

https://www.sparkfun.com/products/10897

a male male will take you between a female ftdi breakout or something
like this

http://www.adafruit.com/products/954

I have some of these too, but am able to solder pins and change it to a
3.3v board

http://jim.sh/ftx/

You can get other similar breakouts and cables on ebay from asia for a
lot less but sometimes you have to wait weeks.  And there is a risk it
doesnt work or is not documented.

Have a couple of these or ones like them I think I got mine much cheaper
but maybe paid $2 for shipping.

http://www.ebay.com/itm/New-version-smaller-micro-FTDI-Basic-Breakout-5V-3-3V-Adjustable-Micro-USB-/231009872096?hash=item35c942e8e0:g:ImQAAOxyg6BR0n1a

For bare metal work you need some serial solutions.  These days you
usually dont need RS232 level solutions, RS232C is a voltage definition
NOT a protocol (extremely common mistake), RS232 voltages will fry a
board like this.  These 3.3V solutions cover 99% and then occasionally
a 5V and I have 1.8V board.  You wont get too far without one/some
serial interface solutions in your toolbox.  And you wont get far at all
with these bare metal examples without one. At least no soldering is
required for most of these examples if you use jumper wires.


ARM toolchain options

if you have ubuntu or a derivative (mint) you can

apt-get install gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi

for linux, windows or mac try this one

https://launchpad.net/gcc-arm-embedded

or

you can use my build_gcc repo to build an arm toolchain from sources
(linux but could be made to build on windows or mac if you do the
work)

Might need to change the ARMGNU definition in my makefiles or change
it in your environment to override.

export ARMGNU=arm-none-eabi



When updating the firmware after running this

  cd ~/CHIP-tools
  ./chip-update-firmware.sh

the CHIP-tools directory has a .firmware directory with the files that
were written to the board.  it appears that the spl program assists
fel in doing things, it is loaded and runs in ram, spits out some
ascii on the uart when run

fel spl .firmware/images/sunxi-spl.bin

and on the uart terminal

U-Boot SPL 2015.10 (Dec 22 2015 - 20:46:00)
DRAM: 512 MiB
CPU: 1008000000Hz, AXI/AHB/APB: 3/2/2

Okay so first I messed around with the spl header, got a blinker01 to
work from SRAM (address 0x00000000 is where the spl is being loaded).
But, should have tried this first, and prefer it.  I have left the
spl binary for you.

Unplug and replug the usb to power cycle the board.  Jumper the
FEL pin to GND  I use the pin 1 GND on that connector not the one they
use in their picture.

fel spl sunxi-spl.bin

if you have the uart up you will see

U-Boot SPL 2015.10 (Dec 22 2015 - 20:46:00)
DRAM: 512 MiB
CPU: 1008000000Hz, AXI/AHB/APB: 3/2/2

then

fel write 0x42000000 blinker01/notmain.bin
fel exe 0x42000000

and it runs as well as if we had run through uboot.

If you look at the CHIP-tools scripts you will see them running uboot
this way.  Just needed to make the connection that the spl program
was assisting in this.

Basically one of my boards is bricked already it doesnt want to boot
uboot completely, has some checksum failures perhaps flash has gone
bad.  So while trying to recover it with these tools, I looked closer
at these tools.  I might write the N.T.C folks about the board not
booting.  I have a few more coming eventually so maybe this becomes a
trophy or paperweight as I think the post-alphas one/some chips moved.

Hmm, interesting, both of my boards are bricked...
